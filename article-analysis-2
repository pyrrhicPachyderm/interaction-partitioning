#!/usr/bin/env Rscript

set.seed(42)

suppressPackageStartupMessages(library(optparse))

this_dir <- dirname(this.path::this.path())
source(paste0(this_dir, "/r/strings.R"))
source(paste0(this_dir, "/r/parameters.R"))
source(paste0(this_dir, "/r/input-data.R"))
source(paste0(this_dir, "/r/priors.R"))
source(paste0(this_dir, "/r/post-process.R"))
source(paste0(this_dir, "/r/rjmcmc-post-process.R"))
source(paste0(this_dir, "/r/coclassification-table.R"))

##################
#Argument parsing.
##################

usage = "%prog [options] OUTPUT_FILE"
description = "Performs all the heavy analysis for the article and supplementary rnw files, and saves it as a .rda file."
option_list <- list(
	make_option(
		c("-r", "--max-rhat"), dest = "max_rhat", type = "double", default = 1.1,
		help = "The maximum allowed Gelman-Rubin statistic (rhat) of any parameter in any analysis; this script will intentionally fail if any exceed it [default %default]."
	)
)
parser <- OptionParser(usage = usage, description=description, option_list=option_list)
arguments <- parse_args(parser, positional_arguments = 1)

outfile <- arguments$args[1]

max_rhat <- arguments$options$max_rhat

#########
#Read in.
#########

species_datas <- lapply(
	list(
		tcl = "/data/tcl/species.csv",
		cxr = "/output/cxr/species.csv",
		goldberg = "/data/goldberg/species.csv"
	),
	function(file) {
		read.csv(paste0(this_dir, file), comment.char="#")
	}
)

datas <- mapply(
	function(file, species_data) {
		RJMCMCData$new(paste0(this_dir, file), species_data$name)
	},
	list(
		tcl = "/output/tcl/rjmcmc.data",
		cxr = "/output/cxr/rjmcmc.data",
		goldberg = "/output/goldberg/rjmcmc.data"
	),
	species_datas
)

input_datas <- lapply(
	list(
		tcl = c("/output/tcl/pop-focal-vector.data", "/output/tcl/pop-response-vector.data", "/output/tcl/pop-design-matrix.data"),
		cxr = c("/output/cxr/indv-focal-vector.data", "/output/cxr/indv-response-vector.data", "/output/cxr/indv-design-matrix.data"),
		goldberg = c("/output/goldberg/indv-focal-vector.data", "/output/goldberg/indv-response-vector.data", "/output/goldberg/indv-design-matrix.data")
	),
	function(files) {
		data_type <- sub("^([^-]+)-.*", "\\1", basename(files[1]))
		files <- paste0(this_dir, files)
		InputData$new(data_type, files[1], files[2], files[3])
	}
)

priors <- lapply(
	list(
		tcl = "/output/tcl/priors.data",
		cxr = "/output/cxr/priors.data",
		goldberg = "/output/goldberg/priors.data"
	),
	function(file) {
		Priors$new(paste0(this_dir, file))
	}
)

output_orders <- list(
	tcl = c(4,3,1,2,6,5),
	cxr = c(8,7,1,2,3,6,5,4,9),
	goldberg = c(1,5,3,6,7,2,4)
)

#The minimum number of times we required a selected species to be observed as the focal in competition with each other selected species.
cxr_min_obs <- read.table(paste0(this_dir, "/output/cxr/min-obs.data"))[[1]]

########################
#Collect assorted stats.
########################

#A list of assumptions, and whether they're met.
#The article using this data should call stopifnot(meets_assumptions).
meets_assumptions <- c()

#Check that all Gelman-Rubin statistics are low enough.
meets_assumptions <- c(meets_assumptions, rhats_below_threshold =
	all(unlist(lapply(datas, function(data){data$rhats})) < max_rhat)
)

#Get the number of chains for each model, and the number of iterations we thinned to.
#Ensure this is the same for all models, as we'll mention it in the paper as though it were.
num_chains <- sapply(datas, function(data){length(data$chain_lengths)})
chain_length <- unlist(lapply(datas, function(data){data$chain_lengths}))
meets_assumptions <- c(meets_assumptions, all_models_same_number_of_chains = all(num_chains == num_chains[1]))
meets_assumptions <- c(meets_assumptions, all_chains_same_length = all(chain_length == chain_length[1]))
num_chains <- num_chains[1]
chain_length <- chain_length[1]

##########
#Analysis.
##########

get_coclassification_matrices <- function(data) {
	list(
		growth = data$weighted_growth_coclassification_matrix,
		row = data$weighted_row_coclassification_matrix,
		col = data$weighted_col_coclassification_matrix
	)
}

coclassification_matrices <- lapply(datas, get_coclassification_matrices)

#########
#Figures.
#########

coclassification_colourmap <- "coclassification"
coclassification_diagonal_colour <- "coclassification diagonal"
coclassification_colour_setup <- paste0(
	"\\pgfplotsset{colormap={",coclassification_colourmap,"}{color=(white) color=(red)}}\n",
	"\\colorlet{",coclassification_diagonal_colour,"}{black!20}\n"
)

get_coclassification_figures <- function(matrices, output_order) {
	lapply(matrices,
		function(mat) {
			output_order <- output_order[output_order <= nrow(mat)]
			weighted_coclassification_kable(
				mat[output_order,output_order],
				colourmap="coclassification", diagonal_colour="coclassification diagonal"
			)
		}
	)
}

coclassification_figures <- mapply(get_coclassification_figures, coclassification_matrices, output_orders, SIMPLIFY = FALSE)

#############
#Save output.
#############

print(ls())

save(list = ls(), file = outfile)
