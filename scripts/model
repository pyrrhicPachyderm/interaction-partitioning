#!/usr/bin/env Rscript
library(R6)

throw <- function(...) {stop(...)}

Data <- R6Class("Data",
	public = list(
		species_names = NULL,
		response_vector = NULL,
		focal_vector = NULL,
		density_design_matrix = NULL,
		
		initialize = function(species_names, response_vector, focal_vector, density_design_matrix) {
			#response_vector is one number for each experiment.
			#focal_vector is one number or string for each experiment: numbers are indices to species_names, strings are entries in species_names.
			#density_design_matrix is one row per experiment and one column per species.
			
			#Check argument sizes.
			if(length(focal_vector) != length(response_vector)) {
				throw("The lengths of response_vector and focal_vector must be equal.")
			}
			if(nrow(density_design_matrix) != length(response_vector)) {
				throw("There must be one row in density_design_matrix per entry in response_vector.")
			}
			if(ncol(density_design_matrix) != length(species_names)) {
				throw("There must be one column in density_design_matrix per entry in species_names.")
			}
			
			#Convert focal_vector to integer if necessary.
			if(class(focal_vector) == "character") {
				focal_vector <- match(focal_vector, species_names)
				if(any(is.na(focal_vector))) {
					throw("At least one entry in focal_vector does not appear in species_names.")
				}
			}
			#Check the values in focal_vector are in range.
			if(any(!(focal_vector %in% 1:length(species_names)))) {
				throw("At least one entry in focal_vector is not an index in species_names.")
			}
			
			#Set the values.
			self$species_names <- species_names
			self$response_vector <- response_vector
			self$focal_vector <- focal_vector
			self$density_design_matrix <- density_design_matrix
		}
	)
)

Grouping <- R6Class("Grouping",
	public = list(
		num_species = NULL,
		grouping = NULL,
		
		initialize = function(num_species, grouping = NULL) {
			#grouping is a list of integers, of length num_species.
			#It must be a valid rhyming scheme, 1-indexed.
			#That is, the first integer must be 1, and subsequent integers must be no more than 1 higher than the highest integer seen yet.
			
			#Set num_species
			self$num_species <- num_species
			
			#Set grouping
			if(!is.null(grouping)) {
				if(!private$validate_grouping(grouping)) {
					throw("Provided grouping is invalid.")
				}
				
				self$grouping <- grouping
			} else {
				self$grouping <- rep(1, num_species)
			}
		}
	),
	
	private = list(
		validate_grouping = function(grouping) {
			#Returns a boolean of whether the grouping is valid.
			
			grouping <- as.integer(grouping)
			
			if(length(grouping) != self$num_species) return(FALSE)
			if(any(grouping < 1)) return(FALSE)
			
			highest_group <- 0
			for(group in grouping) {
				if(group > highest_group + 1) return(FALSE)
				if(group == highest_group + 1) highest_group <- group
			}
			
			return(TRUE)
		}
	)
)
