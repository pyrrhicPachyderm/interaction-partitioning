#!/usr/bin/env Rscript

set.seed(42)

suppressPackageStartupMessages(library(optparse))

this_dir <- dirname(this.path::this.path())
source(paste0(this_dir, "/r/strings.R"))
source(paste0(this_dir, "/r/parameters.R"))
source(paste0(this_dir, "/r/input-data.R"))
source(paste0(this_dir, "/r/post-process.R"))
source(paste0(this_dir, "/r/brute-post-process.R"))
source(paste0(this_dir, "/r/mantel-test.R"))
source(paste0(this_dir, "/r/dist-matrix.R"))
source(paste0(this_dir, "/r/coclassification-table.R"))
source(paste0(this_dir, "/r/grouped-matrix.R"))

##################
#Argument parsing.
##################

usage = "%prog [options] OUTPUT_FILE"
description = "Performs all the heavy analysis for the article and supplementary rnw files, and saves it as a .rda file."
option_list <- list()
parser <- OptionParser(usage = usage, description=description, option_list=option_list)
arguments <- parse_args(parser, positional_arguments = 1)

outfile <- arguments$args[1]

##########
#Analysis.
##########

species_dat <- read.csv(paste0(this_dir, "/data/tcl/species.csv"))
species_output_order <- c(1,3,4,2,6,5)

input_data <- InputData$new("pop", "bevertonholt", paste0(this_dir, "/output/tcl/pop-focal-vector.data"), paste0(this_dir, "/output/tcl/pop-response-vector.data"), paste0(this_dir, "/output/tcl/pop-design-matrix.data"))

num_species <- input_data$num_species
num_obs <- input_data$num_obs

ic <- "aicc" #The information criterion to use, e.g. "aic" or "aicc"
ic_weight <- sprintf("%s_weight", ic)
ic_name <- list(aic="AIC", aicc="AICc")[[ic]]

brute_data <- BruteData$new(paste0(this_dir, "/output/tcl/brute.data"), species_dat$name, ic_weight)
brute_null_data <- BruteData$new(paste0(this_dir, "/output/tcl/brute-null.data"), species_dat$name, ic_weight)

#Precalculate average alpha values for rows and columns.
#TODO: Would this be better done by taking, e.g. the row-separated column-grouped model, rather than column-averaged fully separated model?
col_average_alpha_values <- apply(brute_data$fully_separated_parameters$alpha_values, 2, mean)
row_average_alpha_values <- apply(brute_data$fully_separated_parameters$alpha_values, 1, mean)

#Precalculate the coclassification matrices, as these are active bindings and the slowest part of compilation.
weighted_col_coclassification_matrix <- brute_data$weighted_col_coclassification_matrix
weighted_row_coclassification_matrix <- brute_data$weighted_row_coclassification_matrix

#Precalculate distance matrices as well.
col_distance_matrix <- 1 - weighted_col_coclassification_matrix
row_distance_matrix <- 1 - weighted_row_coclassification_matrix
body_weight_distance_matrix <- build_dist_matrix(species_dat$name, species_dat$body_weight, function(w1,w2){abs(w1-w2)})

best_model_index <- which.max(brute_data$statistics[[ic_weight]])

################################
#Group resolution test analysis.
################################

group_resolution_data <- as.data.frame(do.call(rbind, lapply(list.files(paste0(this_dir, "/output/tcl-test/"), pattern = "brute.data", recursive = TRUE, full.name = TRUE), function(filename) {
	test_data <- BruteData$new(filename, 1:2, ic_weight)
	col_coclassification <- test_data$weighted_col_coclassification_matrix[1, 2]
	row_coclassification <- test_data$weighted_row_coclassification_matrix[1, 2]
	return(c(filename = filename, col_coclassification = col_coclassification, row_coclassification = row_coclassification))
}))) |>
	tidyr::separate_wider_regex(filename, patterns = c(".*/r", row_diff = ".*", "-c", col_diff = ".*", "/s", seed = ".*", "/.*")) |>
	dplyr::mutate_all(as.numeric)

#########
#Figures.
#########

coclassification_colourmap <- "coclassification"
coclassification_diagonal_colour <- "coclassification diagonal"
coclassification_colour_setup <- paste0(
	"\\pgfplotsset{colormap={",coclassification_colourmap,"}{color=(white) color=(red)}}\n",
	"\\colorlet{",coclassification_diagonal_colour,"}{black!20}\n"
)

ic_histogram <- function(brute_data, lty = c("dashed", "dotted"), col = c("green", "purple"), legend = FALSE) {
	lwd <- 2
	get_breaks <- function(x, bin_width) {
		lower_bound <- min(x) - min(x)%%bin_width
		upper_bound <- max(x) + (bin_width - max(x)%%bin_width)%%bin_width
		return(seq(lower_bound, upper_bound, by = bin_width))
	}
	hist(brute_data$statistics[[ic]],
		main="",
		xlab=ic_name,
		xaxs='i',
		yaxs='i',
		ylim=c(0,2500),
		breaks=get_breaks(brute_data$statistics[[ic]], 2)
	)
	abline(v = brute_data$fully_separated_statistics[[ic]], lwd=lwd, lty=lty[1], col=col[1])
	abline(v = brute_data$fully_grouped_statistics[[ic]], lwd=lwd, lty=lty[2], col=col[2])
	if(legend) {
		legend("topleft", inset = c(0.2,0),
			legend = c("Fully separated", "Fully grouped"),
			lwd = lwd,
			lty = lty,
			col = col
		)
	}
}

get_model_output_table <- function(brute_data, model_index) {
	model_index <- which.max(brute_data$statistics[[ic_weight]])
	row_grouping <- brute_data$get_row_grouping(model_index)
	col_grouping <- brute_data$get_col_grouping(model_index)
	alpha_matrix <- brute_data$get_parameters(model_index)$alpha_values
	
	ordering <- get_ordering(list(row_grouping, col_grouping))
	species_names <- brute_data$species_names[ordering]
	row_grouping <- row_grouping[ordering]
	col_grouping <- col_grouping[ordering]
	alpha_matrix <- alpha_matrix[ordering,ordering]
	
	row_coclassification <- as_coclassification_matrix(row_grouping)
	col_coclassification <- as_coclassification_matrix(col_grouping)
	
	grouped_alpha_matrix <- grouped_alpha_matrix(
		species_names,
		row_grouping,
		col_grouping,
		alpha_matrix
	)
	
	col_coclassification_table <- minimal_coclassification_kable(
		col_coclassification,
		colourmap=coclassification_colourmap, diagonal_colour=coclassification_diagonal_colour
	)
	
	row_coclassification_table <- minimal_coclassification_kable(
		row_coclassification,
		colourmap=coclassification_colourmap, diagonal_colour=coclassification_diagonal_colour
	)
	
	return(list(
		grouped_alpha_matrix = grouped_alpha_matrix,
		col_coclassification_table = col_coclassification_table,
		row_coclassification_table = row_coclassification_table
	))
}

best_model_output_table <- get_model_output_table(brute_data, best_model_index)

weighted_coclassification_matrices <- list(
	col = weighted_coclassification_kable(
		weighted_col_coclassification_matrix[species_output_order,species_output_order],
		colourmap=coclassification_colourmap, diagonal_colour=coclassification_diagonal_colour
	),
	row = weighted_coclassification_kable(
		weighted_row_coclassification_matrix[species_output_order,species_output_order],
		colourmap=coclassification_colourmap, diagonal_colour=coclassification_diagonal_colour
	)
)

order_species <- function(vec, names, order) {
	#Takes a vector of species names and redefines them as a factor with correctly ordered levels.
	#This forces ggplot to use them in the correct order for a facet plot.
	factor(vec, levels = names[order])
}

model_fit_plot <- function(parameters, species_output_order) {
	plot_df <- data.frame(
		observed = input_data$response_vector,
		fitted = input_data$get_fitted_values(parameters),
		focal = species_dat$name[input_data$focal_vector]
	)
	
	plot_df$focal <- order_species(plot_df$focal, species_dat$name, species_output_order)
	
	plot <- ggplot2::ggplot(plot_df, ggplot2::aes(x = observed, y = fitted)) +
		ggplot2::geom_point() +
		ggplot2::geom_abline(slope = 1, intercept = 0) +
		ggplot2::facet_wrap(.~focal) +
		ggplot2::labs(x = "Observed offspring generation size", y = "Predicted offsrping generation size")
	return(plot)
}

partial_residual_plot <- function(parameters, species_output_order) {
	plot_df <- c()
	for(row_index in 1:num_species) {
		for(col_index in 1:num_species) {
			temp_df <- data.frame(
				y = input_data$get_partial_residuals(parameters, row_index, col_index),
				x = input_data$get_partial_residuals_x(row_index, col_index)
			)
			temp_df$row_index <- rep(row_index, nrow(temp_df))
			temp_df$col_index <- rep(col_index, nrow(temp_df))
			temp_df$alpha <- parameters$alpha_values[row_index, col_index]
			plot_df <- rbind(plot_df, temp_df)
		}
	}
	
	plot_df$row_species <- species_dat$name[plot_df$row_index]
	plot_df$col_species <- species_dat$name[plot_df$col_index]
	plot_df$row_species <- order_species(plot_df$row_species, species_dat$name, species_output_order)
	plot_df$col_species <- order_species(plot_df$col_species, species_dat$name, species_output_order)
	
	plot <- ggplot2::ggplot(plot_df, ggplot2::aes(x = x, y = y)) +
		ggplot2::geom_point() +
		ggplot2::geom_abline(ggplot2::aes(slope = alpha, intercept = 0)) +
		ggplot2::facet_grid(row_species~col_species) +
		ggplot2::labs(x = "Number of individuals of competing species", y = "Partial residual offspring generation size") +
		ggplot2::theme(strip.text = ggplot2::element_text(size=7))
	return(plot)
}

best_parameters <- brute_data$get_parameters(best_model_index)
average_parameters <- brute_data$average_parameters

best_model_fit_plot <- model_fit_plot(best_parameters, species_output_order)
average_model_fit_plot <- model_fit_plot(average_parameters, species_output_order)
best_partial_residual_plot <- partial_residual_plot(best_parameters, species_output_order)
average_partial_residual_plot <- partial_residual_plot(average_parameters, species_output_order)

#############
#Save output.
#############

print(ls())

save(list = ls(), file = outfile)
